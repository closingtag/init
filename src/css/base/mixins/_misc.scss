// @mixin old-ie {}
//
// Oldie Mixin for @content for older IE
//
// usage:
// @include old-ie {
//    background-color: #ff0000;
// }
//
@mixin old-ie {
  @if $old-ie {
    @content;
  }
}


@mixin image-replace() {
  display: block;
  border: 0;
  text-indent: -999em;
  overflow: hidden;
  background-color: transparent;
  background-repeat: no-repeat;
  text-align: left;
  direction: ltr;
  @if $support-for-ie6 or $support-for-ie7 {
    *line-height: 0;
  }
  br {
    display: none;
  }
}


@mixin vh() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;

  &.focusable {
    &:active, &:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
    }
  }
}


// Font mixin
@mixin font($family: false, $size: false, $weight: false, $style: false) {

	@if ($webfont) {

		$class: to_lower_case($family);

		@if ($weight) {
			$class: $class + '-' + $weight;
		}

		@if ($style) {
			$class: $class + '-' + $style;
		}

		font-family: $font-main;

		.#{$class} & {
			font-family: $family, $font-main;
		}
	}
	@else {
		font-family: $family, $font-main;
	}

	@if ($size) {
		font-size: rem($size);
		//margin-bottom: measure-margin($size);
	}
	@if ($weight) {
		font-weight: $weight;
	}
	@if ($style) {
		font-style: $style;
	}
}


// For adding icons to elements using CSS pseudo-elements
// Source: http://jaydenseric.com/blog/fun-with-sass-and-font-icons
@mixin icon($position: 'before', $styles: true, $icon: false, $fontsize: 20px) {
  // Either a :before or :after pseudo-element, defaulting to :before
  &:#{$position} {
    @if $icon {
      // Icon has been specified
      content: match($icons, $icon);
    }
    @if $styles {
      // Supportive icon styles have been specified
      speak: none;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      text-transform: none;
      line-height: 1;
      font: {
        style: normal;
        variant: normal;
        weight: normal;
        size: $fontsize;
        family: 'icomoon';
      }
    }
    // Include any extra rules supplied for the pseudo-element
    @content;
  }
}


// @mixin x-rgba()
//
// RGBA IE fallback
// based on http://thesassway.com/intermediate/mixins-for-semi-transparent-colors
//
// usage:
// @include x-rgba(rgba(red, 0.6), white);
// @include x-rgba(rgba(red, 0.6), white, 'color');

@mixin x-rgba($color, $background, $attribute: 'background-color') {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);

  @if $old-ie {
   @if $support-for-ie6 or $support-for-ie7 or $support-for-ie8 {
      #{$attribute}: $solid-color;
    }
  }
  @else {
    #{$attribute}: $color;
  }
}


// @mixin svg-with-png()
//
// mixin that requires filename without path or extension and optional extension override
@mixin svg-with-png($filename, $extension: '.png') {
    background-image: image-url($filename + '.svg');

    .no-svg & {
      background-image: image-url('png/$filename' + $extension);
    }
}


// @mixin checkbox
//
// Markup needs to be input + label in sourceorder for this thing to work
//
// $height,
// $width,
// $labelcolor: $grey,
// $position: "right",
// $content: "Ã—"
//

@mixin checkbox( $height, $width, $labelcolor, $color, $position: 'left', $content: "") {

	@extend %vh;

	+ label {
		color: $labelcolor;
		position: relative;
		padding: 0.5em;
		vertical-align: middle;
		user-select: none;

		@if $position == "right" {
			padding-right: $width+10;
			margin-right: 6px;
		}

		@else if $position == "left" {
			padding-left: $width+10;
			margin-left: 6px;
		}

		&:before {
			content: '';
			color: $color;
			position: absolute;
			top: 45%;
			transform: translateY(-50%);

			@if $position == "right" {
				right: 0;
			}

			@else if $position == "left" {
				left: 0;
			}

			width: $width;
			height: $height;
			border: 1px solid $grey;
			background: $white;
			font-size: 18px;
			line-height: 21px;
			text-align: center;
			border-radius: 3px;
			box-shadow: 1px 1px 1px rgba($black,.1) inset;
		}
	}

	&:checked {
		+ label {
			color: $black;

			&:before {
				content: $content;
				font-size: $base-fontsize;
				line-height: $base-lineheight;
				text-align: center;
				text-transform: uppercase;
			}
		}
	}

	// Include any extra rules supplied
	@content;
}


// @mixin maxlines
//
// Set calculated max height of element
//
// @param int $height (max lines of text)
// @param int $fz (default: $base-fontsize)
// @param int $lh (default: $base-lineheight)
//
// @return value in em
//
// EXAMPLE:
//
// h1 {
//   @include maxlines(3);
// }
@mixin maxlines($height, $property: height, $fz: $base-fontsize, $lh: $base-lineheight, $pt: 0, $pb: 0, $truncated: false) {
	$padtop: em($pt);
	$padbot: em($pb);

	overflow: hidden;
	#{$property}: $height * (strip-units($lh / $fz)) * 1em + $padtop + $padbot;

	@if ($truncated) {
		@extend %cropped-text;
	}
}
