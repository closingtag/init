// Set lightness of a given color
// adapted from https://github.com/Team-Sass/color-schemer/blob/master/stylesheets/color-schemer/_color-adjustments.scss
// Usage: background-color: set-lightness($color-main, 15%);
//        aka 15% transparence of a color
@function set-lightness($color, $lightness) {
	@return hsla(hue($color), saturation($color), (100 - $lightness), alpha($color));
}

// simple px to em conversion
@function px2em($font_size, $base_font_size: 16) {
	@return $font_size / $base_font_size + em;
}

// Strips the unit for a given number
// @param   $number     ('Number')  the number the unit should be stripped
// @returns ('Number')  the number without an unit
@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

// Converts px to em
// @param   $target     ('Number')  target pixel value
// @param   $context    ('Number')  context (container) pixel size
// @returns ('Number')        the px value converted to em
@function em($target, $context: $base-fontsize) {
	@return ($target / $context) * 1em;
}

// Converts em to px
// @param   $target     ('Number')  target em value
// @param   $context    ('Number')  context (container) pixel size
// @returns ('Number')  the px value converted to em
@function px($target, $context: $base-fontsize) {
		@return (strip-units($target) * strip-units($context)) * 1px;
}

// To simulate associative arrays
// Source: http://hugogiraudel.com/2013/08/12/sass-functions/#mapping
@function match($haystack, $needle) {
  @each $item in $haystack {
    $index: index($item, $needle);
    @if $index {
      $return: if($index == 1, 2, $index);
      @return nth($item, $return);
    }
  }
  @return false;
}

// @function measure-margin
// from http://typeplate.com/
// -------------------------------------//
// divide 1 unit of measure by given font-size & return a relative em value
@function measure-margin($font-size: $base-fontsize, $line-height: $base-lineheight, $value: em) {
  @return (strip-units($font-size) / ($line-height * strip-units($base-fontsize)))#{$value};
}

// Add percentage of white to a color
@function tint($color, $percent){
  @return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent){
  @return mix(black, $color, $percent);
}


/**
*  Converts photoshop line height (leading) to pixels
*
*  @param int $font-size
*  @param int $leading
*
*  @return relative value
*
*  EXAMPLE:
*  p {
*    line-height: line-height(44px, 54px);
*  }
**/

@function line-height($font-size, $leading){
  @return strip-units($leading) / strip-units($font-size);
}

/**
*  Converts photoshop letter spacing to pixels
*  Spacing is divided by 1000 which gives an em value
*  this is then mutplied by default browser fontsize (typically 16px)
*
*  @param int $spacing
*  @param int $context (default: $base-fontsize)
*
*  @return em value
*
*  EXAMPLE:
*  p {
*    letter-spacing: letter-spacing(100px);
*  }
**/
@function letter-spacing($spacing, $context: $base-fontsize){
  @return (strip-units($spacing)/1000) * strip-units($context) * 1em;
}


/**
*  convert px font-size to viewport-width (vw)
*  Read the article: http://sassbreak.com/viewport-relative-headings-with-sass
*
*  @param int $target
*  @param int $context (calculate context based on $page-max value)
*
*  @return vw value
*
*  EXAMPLE:
*  h1 {
*    @include vw(72px);
*  }
**/

@function vw($target) {
  $context: strip-units(($page-max * .01) * 1px);
  @return (strip-units($target) / $context) * 1vw;
}

// // Mixin
// @mixin vw($size) {
//   font-size: get-vw($size);

//   // If the width of the viewport is 1025px or wider, the font size will remain at 72px. Otherwise, the value will adjust as 7.2vw.
//   @media #{$wide-screen} {
//     font-size: $size;
//   }
// }





/*
 * Asset helper
 * via http://css-tricks.com/snippets/sass/simple-asset-helper-functions/
 *

USAGE:

@font-face {
  font-family: 'Unicorn Font';
  src: font('unicorn.eot?') format('eot'),
       font('unicorn.otf') format('truetype'),
       font('unicorn.woff') format('woff'),
       font('unicorn.svg#unicorn') format('svg');
  font-weight: normal;
  font-style: normal;
}

.foo {
  background-image: image('kittens.png');
}
 *
 *
 */

/// Base path for assets (fonts, images...),
/// should not include trailing slash
/// @access public
/// @type String
$asset-base-path: '../' !default;

/// Asset URL builder
/// @access private
/// @param {String} $type - Asset type, matching folder name
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the asset
@function asset($type, $file) {
  @return url($asset-base-path + '/' + $type + '/' + $file);
}

/// Image asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the image
/// @require {function} asset
@function image($file) {
  @return asset('img', $file);
}

/// Font asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the font
/// @require {function} asset
@function font($file) {
  @return asset('fonts', $file);
}
