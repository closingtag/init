// ----
// libsass (v3.2.5)
// ----

/*! ========================================================================

		QUANTITY QUERIES FOR SASS
		-------------------------
		Indrek Paas @indrekpaas

		Inspired by Heydon Pickering's Quantity Queries for CSS
		http://alistapart.com/article/quantity-queries-for-css

		`str-num()` function by Hugo Giraudel

		09.11.2015 Add 'odd/even' argument support
		03.10.2015 Remove redundant 'query' from mixin name
		04.08.2015 Add 'at-least/at-most' support

		========================================================================  */


@mixin quantity($arg) {
	// Exactly N
	@if type-of($arg) == "number" {
		&:nth-last-child(#{$arg}):first-child,
		&:nth-last-child(#{$arg}):first-child ~ & {
			@content;
		}
	}

	// At least N and at most N
	@else if type-of($arg) == "list" {
		&:nth-last-child(n+#{nth($arg, 1)}):nth-last-child(-n+#{nth($arg, 2)}):first-child,
		&:nth-last-child(n+#{nth($arg, 1)}):nth-last-child(-n+#{nth($arg, 2)}):first-child ~ & {
			@content;
		}
	}

	@else if type-of($arg) == "string" {
		// Odd/even
		@if $arg == "odd" or $arg == "even" {
			&:nth-last-child(#{$arg}):first-child,
			&:nth-last-child(#{$arg}):first-child ~ & {
				@content;
			}
		}

		// Less than...
		@else if str-slice($arg, 1, 1) == "<" {
			// Less than or equal to N
			@if str-slice($arg, 2, 2) == "=" {
				$arg: str-slice($arg, 3);
				&:nth-last-child(-n+#{$arg}):first-child,
				&:nth-last-child(-n+#{$arg}):first-child ~ & {
					@content;
				}
			}

			// Less than N
			@else {
				$arg: str-num(str-slice($arg, 2));
				&:nth-last-child(-n+#{$arg - 1}):first-child,
				&:nth-last-child(-n+#{$arg - 1}):first-child ~ & {
					@content;
				}
			}
		}

		// More than...
		@else if str-slice($arg, 1, 1) == ">" {
			// More than or equal to N
			@if str-slice($arg, 2, 2) == "=" {
				$arg: str-slice($arg, 3);
				&:nth-last-child(n+#{$arg}),
				&:nth-last-child(n+#{$arg}) ~ & {
					@content;
				}
			}

			// More than N
			@else {
				$arg: str-num(str-slice($arg, 2));
				&:nth-last-child(n+#{$arg + 1}),
				&:nth-last-child(n+#{$arg + 1}) ~ & {
					@content;
				}
			}
		}
	}
}




@function str-num($string) {
	// Matrices
	$strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
	$numbers:  0   1   2   3   4   5   6   7   8   9;

	// Result
	$result: 0;

	// Looping through all characters
	@for $i from 1 through str-length($string) {
		$character: str-slice($string, $i, $i);
		$index: index($strings, $character);

		@if not $index {
			@warn "Unknown character `#{$character}`.";
			@return false;
		}

		$number: nth($numbers, $index);
		$result: $result * 10 + $number;
	}

	@return $result;
}




// div {

// 	@include quantity(8) {
// 		/* Exactly 8 */
// 	}

// 	@include quantity(8 12) {
// 		/* At least 8 and at most 12 */
// 	}

// 	@include quantity(odd) {
// 		/* Odd quantity */
// 	}

// 	@include quantity(even) {
// 		/* Even quantity*/
// 	}

// 	@include quantity("<8") {
// 		/* Less than 8 */
// 	}

// 	@include quantity("<=8") {
// 		/* Less than or equal to 8 */
// 	}

// 	@include quantity(">8") {
// 		/* More than 8 */
// 	}

// 	@include quantity(">=8") {
// 		/* More than or equal to 8 */
// 	}
// }
